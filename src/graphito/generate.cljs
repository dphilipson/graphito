(ns graphito.generate)

(def names ["Bella"
            "Edward"
            "Jacob"
            "Carlisle"
            "Esme"
            "Alice"
            "Emmett"
            "Rosalie"
            "Jasper"
            "Renesmee"
            "James"
            "Victoria"
            "Laurent"
            "Riley"
            "Bree"
            "Aro"
            "Caius"
            "Marcus"
            "Jane"
            "Alec"
            "Demetri"
            "Felix"
            "Heidi"
            "Leah"
            "Seth"])

(def rands
  [0.0040871258825063705 0.4585950071923435 0.3363801233936101
   0.057653810596093535 0.4806740670464933 0.443930737208575
   0.08106743427924812 0.5381493004970253 0.812215648824349 0.29585187532939017
   0.17181947198696434 0.8871802329085767 0.8398005936760455 0.8015438728034496
   0.7976672041695565 0.907670876942575 0.4927325421012938 0.01939818123355508
   0.8079581854399294 0.3957686966750771 0.9051128488499671 0.16268633911386132
   0.2603324116207659 0.798268134240061 0.7634163442999125 0.5465437497477978
   0.3137345090508461 0.5346399946138263 0.5995599750895053
   0.0036616807337850332 0.9176775822415948 0.4752379055134952
   0.7392499896232039 0.6739935157820582 0.07562446850351989 0.660168509464711
   0.6379899049643427 0.055300734704360366 0.19579238980077207
   0.02818756364285946 0.19305834686383605 0.7749646825250238
   0.6428308319300413 0.2986525776796043 0.7465545870363712 0.40595135651528835
   0.39057257352396846 0.9799706302583218 0.8801821416709572 0.7839054979849607
   0.049833460012450814 0.46930040791630745 0.48037735861726105
   0.3299860102124512 0.5149423722177744 0.4293165651615709 0.5293896414805204
   0.9914559035096318 0.08070048643276095 0.08600690891034901
   0.5757961827330291 0.524672559928149 0.7458172875922173])

(defn edge [i j]
  {:source i :target j})

(defn node [name]
  {:name name})

(defn ^:export gilbert-graph [num-nodes p]
  (let [nodes (->> names cycle (map node) (take num-nodes) vec)
        links (vec (for [source (range (dec num-nodes))
                         target (range (inc source) num-nodes)
                         :when (< (rands (mod (+ (* num-nodes source) target) (count rands))) p)]
                     (edge source target)))]
    {:nodes nodes :links links}))
